// Public D2BS constants

Include("libs/common/MWSkills.ntl");

// Character Class
const NTC_CHAR_CLASS_AMAZON = 0;
const NTC_CHAR_CLASS_SORCERESS = 1;
const NTC_CHAR_CLASS_NECROMANCER = 2;
const NTC_CHAR_CLASS_PALADIN = 3;
const NTC_CHAR_CLASS_BARBARIAN = 4;
const NTC_CHAR_CLASS_DRUID = 5;
const NTC_CHAR_CLASS_ASSASSIN = 6;

// Act 1 NPCs
const NTC_NPC_ID_AKARA = 148;
const NTC_NPC_ID_WARRIV_ACT_1 = 155;
const NTC_NPC_ID_CHARSI = 154;
const NTC_NPC_ID_GHEED = 147;
const NTC_NPC_ID_KASHYA = 150;
const NTC_NPC_ID_CAIN_TRISTRAM = 146;
const NTC_NPC_ID_CAIN_ACT_1 = 244;

// Act 2 NPCs
const NTC_NPC_ID_FARA = 178;
const NTC_NPC_ID_LYSANDER = 202;
const NTC_NPC_ID_GREIZ = 198;
const NTC_NPC_ID_ELZIX = 199;
const NTC_NPC_ID_MESHIF_ACT_2 = 210;
const NTC_NPC_ID_DROGNAN = 177;
const NTC_NPC_ID_ATMA = 176;
const NTC_NPC_ID_WARRIV_ACT_2 = 175; 
const NTC_NPC_ID_CAIN_ACT_2 = 245;
const NTC_NPC_ID_JERHYN = 201;
const NTC_NPC_ID_TYRAEL_ACT_2 = 251;

// Act 3 NPCs
const NTC_NPC_ID_MESHIF_ACT_3 = 264;
const NTC_NPC_ID_CAIN_ACT_3 = 246;
const NTC_NPC_ID_ALKOR = 254;
const NTC_NPC_ID_ASHEARA = 252;
const NTC_NPC_ID_ORMUS = 255;
const NTC_NPC_ID_HRATLI = 253;

// Act 4 NPCs
const NTC_NPC_ID_CAIN_ACT_4 = 265;
const NTC_NPC_ID_HALBU = 257;
const NTC_NPC_ID_TYRAEL_ACT_4 = 367;
const NTC_NPC_ID_JAMELLA = 405;

// Act 5 NPCs
const NTC_NPC_ID_CAIN_ACT_5 = 520;
const NTC_NPC_ID_TYRAEL_ACT_5 = 521;
const NTC_NPC_ID_LARZUK = 511;
const NTC_NPC_ID_ANYA_FROZEN_RIVER = 527;
const NTC_NPC_ID_ANYA_TOWN = 512;
const NTC_NPC_ID_MALAH = 513;
const NTC_NPC_ID_QUALKEHK = 515;
const NTC_NPC_ID_NIHLATHAK_TOWN = 514;
const NTC_NPC_ID_NIHLATHAK_HALLS_OF_VAUGHT = 526;

// UNIT types
const NTC_UNIT_PLAYER = 0;
const NTC_UNIT_NPC = 1;
const NTC_UNIT_MERC = NTC_UNIT_NPC;
const NTC_UNIT_MONSTER = NTC_UNIT_NPC;
const NTC_UNIT_OBJECT = 2;
const NTC_UNIT_MISSILE = 3;
const NTC_UNIT_ITEM = 4;
const NTC_UNIT_TILE = 5;
const NTC_UNIT_STASH = 267;
const NTC_UNIT_CUBE = 549;

const NTC_AREA_ID_ACT_1 = 1;
const NTC_AREA_ID_ACT_2 = 40;
const NTC_AREA_ID_ACT_3 = 75;
const NTC_AREA_ID_ACT_4 = 103;
const NTC_AREA_ID_ACT_5 = 109;

// COLOR types
const NTC_COLOR_BASE_WHITE = 0;
const NTC_COLOR_BASE_RED = 1;
const NTC_COLOR_BASE_GREEN = 2;
const NTC_COLOR_BASE_BLUE = 3;
const NTC_COLOR_BASE_GOLD = 4;
const NTC_COLOR_BASE_GRAY = 5;
const NTC_COLOR_BASE_BLACK = 6;
const NTC_COLOR_BASE_GOLD2 = 7;
const NTC_COLOR_BASE_ORANGE = 8;
const NTC_COLOR_BASE_YELLOW = 9;

const NTC_HAND_RIGHT = 0;
const NTC_HAND_LEFT = 1;

const NTC_CLICK_LDOWN = 0;
const NTC_CLICK_LHOLD = 1;
const NTC_CLICK_LUP = 2;
const NTC_CLICK_RDOWN = 3;
const NTC_CLICK_RHOLD = 4;
const NTC_CLICK_RUP = 5;

const NTC_SHIFT_NONE = 0;
const NTC_SHIFT_HOLD = 1;

const NTC_LOG_COMMON = 0;
const NTC_LOG_ITEM = 1;

const NTC_DELAY_FRAME = 40;

var NTC_ItemQualityToName = new Array(9);
NTC_ItemQualityToName[0] = "None";
NTC_ItemQualityToName[1] = "Low Quality";
NTC_ItemQualityToName[2] = "Normal";
NTC_ItemQualityToName[3] = "Superior";
NTC_ItemQualityToName[4] = "Magic";
NTC_ItemQualityToName[5] = "Set";
NTC_ItemQualityToName[6] = "Rare";
NTC_ItemQualityToName[7] = "Unique";
NTC_ItemQualityToName[8] = "Crafted";

var NTC_ItemQualityToD2Color = new Array(9);
NTC_ItemQualityToD2Color[0] = "ÿc0";
NTC_ItemQualityToD2Color[1] = "ÿc0";
NTC_ItemQualityToD2Color[2] = "ÿc0";
NTC_ItemQualityToD2Color[3] = "ÿc0";
NTC_ItemQualityToD2Color[4] = "ÿc3";
NTC_ItemQualityToD2Color[5] = "ÿc2";
NTC_ItemQualityToD2Color[6] = "ÿc9";
NTC_ItemQualityToD2Color[7] = "ÿc4";
NTC_ItemQualityToD2Color[8] = "ÿc8";

var NTC_ItemQualityToMGRColor = new Array(9);
NTC_ItemQualityToMGRColor[0] = "ÿc6";
NTC_ItemQualityToMGRColor[1] = "ÿc6";
NTC_ItemQualityToMGRColor[2] = "ÿc6";
NTC_ItemQualityToMGRColor[3] = "ÿc6";
NTC_ItemQualityToMGRColor[4] = "ÿc3";
NTC_ItemQualityToMGRColor[5] = "ÿc2";
NTC_ItemQualityToMGRColor[6] = "ÿc9";
NTC_ItemQualityToMGRColor[7] = "ÿc4";
NTC_ItemQualityToMGRColor[8] = "ÿc8";


// Minion classids
const MWC_MINION_SKELETON = 363;
const MWC_MINION_SKELETAL_MAGE = 364;
const MWC_MINION_CLAY_GOLEM = 289;
const MWC_MINION_BLOOD_GOLEM = 290;
const MWC_MINION_IRON_GOLEM = 291;
const MWC_MINION_FIRE_GOLEM = 292;

const MWC_MINION_WAKE_OF_FIRE = 410;
const MWC_MINION_CHARGED_BOLT_SENTRY = 411;
const MWC_MINION_LIGHTNING_SENTRY = 412;
const MWC_MINION_WAKE_OF_INFERNO = 415;
const MWC_MINION_DEATH_SENTRY = 416;
const MWC_MINION_SHADOW_WARRIOR = 417;
const MWC_MINION_SHADOW_MASTER = 418;

const MWC_MINION_RAVEN = 419;
const MWC_MINION_SPIRIT_WOLF = 420;
const MWC_MINION_DIRE_WOLF = 421;
const MWC_MINION_SPIRIT_OF_BARBS = 422;
const MWC_MINION_HEART_OF_THE_WOLVERINE = 423;
const MWC_MINION_OAK_SAGE = 424;
const MWC_MINION_POISON_CREEPER = 425;
const MWC_MINION_CARRION_VINE = 426;
const MWC_MINION_SOLAR_CREEPER = 427;
const MWC_MINION_GRIZZLY = 428;

const MWC_MINION_ROGUE_SCOUT = 271;
const MWC_MINION_DESERT_MERCENARY = 338;
const MWC_MINION_IRON_WOLF = 359;
const MWC_MINION_BARBARIAN = 561;


function NTC_IncludeConfig(filepath)
{
	var _configname;
	var _configfile;

	switch(me.classid)
	{
	case NTC_CHAR_CLASS_AMAZON:
		_configname = "NTConfig_Amazon_" + me.charname + ".ntl"
		break;
	case NTC_CHAR_CLASS_SORCERESS:
		_configname = "NTConfig_Sorceress_" + me.charname + ".ntl"
		break;
	case NTC_CHAR_CLASS_NECROMANCER:
		_configname = "NTConfig_Necromancer_" + me.charname + ".ntl"
		break;
	case NTC_CHAR_CLASS_PALADIN:
		_configname = "NTConfig_Paladin_" + me.charname + ".ntl"
		break;
	case NTC_CHAR_CLASS_BARBARIAN:
		_configname = "NTConfig_Barbarian_" + me.charname + ".ntl"
		break;
	case NTC_CHAR_CLASS_DRUID:
		_configname = "NTConfig_Druid_" + me.charname + ".ntl"
		break;
	case NTC_CHAR_CLASS_ASSASSIN:
		_configname = "NTConfig_Assassin_" + me.charname + ".ntl"
		break;
	}

	_configfile = FileOpen(filepath + "/" + _configname, 0);
	if(_configfile)
		_configfile.Close();
	else
	{
		Print("ÿc3Loaded default config");

		switch(me.classid)
		{
		case NTC_CHAR_CLASS_AMAZON:
			_configname = "NTConfig_Amazon.ntl"
			break;
		case NTC_CHAR_CLASS_SORCERESS:
			_configname = "NTConfig_Sorceress.ntl"
			break;
		case NTC_CHAR_CLASS_NECROMANCER:
			_configname = "NTConfig_Necromancer.ntl"
			break;
		case NTC_CHAR_CLASS_PALADIN:
			_configname = "NTConfig_Paladin.ntl"
			break;
		case NTC_CHAR_CLASS_BARBARIAN:
			_configname = "NTConfig_Barbarian.ntl"
			break;
		case NTC_CHAR_CLASS_DRUID:
			_configname = "NTConfig_Druid.ntl"
			break;
		case NTC_CHAR_CLASS_ASSASSIN:
			_configname = "NTConfig_Assassin.ntl"
			break;
		}
	}

	Include(filepath + "/NTConfig.ntl");
	Include(filepath + "/" + _configname);
}

function NTC_IncludeLibs()
{
	Include("libs/common/NTAttack.ntl");
	Include("libs/common/NTCubing.ntl");
	Include("libs/common/NTItemParser.ntl");
	Include("libs/common/NTMove.ntl");
	Include("libs/common/NTPrecast.ntl");
	Include("libs/common/NTSnagIt.ntl");
	Include("libs/common/NTTown.ntl");
	Include("libs/common/NTTownManager.ntl");
	Include("libs/common/NTTownMove.ntl");
	Include("libs/common/NTFile.ntl");
	Include("libs/common/NTUtilities.ntl");
	Include("libs/common/NTColorConverter.ntl");
	Include("libs/common/NTTeamBot.ntl");
	
	switch (me.classid) {
	case NTC_CHAR_CLASS_AMAZON:
		Include("libs/common/NTAttackAmazon.ntl");
		break;
	case NTC_CHAR_CLASS_ASSASSIN:
		Include("libs/common/NTAttackAssassin.ntl");
		break;
	case NTC_CHAR_CLASS_BARBARIAN:
		Include("libs/common/NTAttackBarbarian.ntl");
		break;
	case NTC_CHAR_CLASS_DRUID:
		Include("libs/common/NTAttackDruid.ntl");
		break;
	case NTC_CHAR_CLASS_NECROMANCER:
		Include("libs/common/NTAttackNecromancer.ntl");
		break;
	case NTC_CHAR_CLASS_PALADIN:
		Include("libs/common/NTAttackPaladin.ntl");
		break;
	case NTC_CHAR_CLASS_SORCERESS:
		Include("libs/common/NTAttackSorceress.ntl");
		break;
	}
	
}

function NTC_CastSkill(skillid, usehand, x, y)
{
	var _hand;
	var _shift;

	if(arguments.length < 1)
		return false;
		
	if(arguments.length == 1)
	{
		_hand = NTC_CLICK_RDOWN;
		_shift = NTC_SHIFT_NONE;
		usehand = NTC_HAND_RIGHT;
	}
	else
	{
		if(usehand == NTC_HAND_RIGHT)
		{
			_hand = NTC_CLICK_RDOWN;
			_shift = NTC_SHIFT_NONE;
		}
		else if(usehand == NTC_HAND_LEFT)
		{
			_hand = NTC_CLICK_LDOWN;
			_shift = NTC_SHIFT_NONE;
		}
		else
		{
			_hand = NTC_CLICK_LDOWN;
			_shift = NTC_SHIFT_HOLD;
			usehand = NTC_HAND_LEFT;
		}
	}

	if(NTC_PutSkill(skillid, usehand))
	{
		var i, n;
		var _mode;

		if(!NTC_ClearCursor())
			return false;

		for(i = 0 ; i < 5 ; i++)
		{
			switch(arguments.length)
			{
			case 1:
			case 2:
				ClickMap(_hand, _shift, me.x, me.y);
				break;
			case 3:
				if(!ClickMap(_hand, _shift, x))
				{
					NTC_Delay(NTC_DELAY_FRAME);
					return false;
				}
				break;
			default:
				ClickMap(_hand, _shift, x, y);
				break;
			}

			for(n = 0 ; n < 4 ; n++)
			{
				NTC_Delay(NTC_DELAY_FRAME);

				_mode = me.mode;
				if(_mode == 7 || _mode == 8 || (_mode >= 10 && _mode <= 16) || _mode == 18)
				{
					NTC_Delay(NTC_DELAY_FRAME);
					break;
				}
			}

			ClickMap(_hand+2, NTC_SHIFT_NONE, null);

			if(n < 4)
			{
				for(i = 0 ; i < 100 ; i++)
				{
					NTC_Delay(20);

					if(me.mode != _mode)
						break;
				}

				return true;
			}

			NTC_Delay(NTC_DELAY_FRAME);
		}
	}

	return false;
}

function NTC_PutSkill(skillid, hand)
{
	if(me.GetSkill(hand) == skillid)
		return true;

	if(GetBaseStat("skills.txt", skillid, 182))
		return false;

	if(NTC_GetSkillLevel(skillid) < 1)
		return false;

	return me.SetSkill(skillid, hand);
}

function NTC_GetSkillLevel(skillid)
{
	var _level = me.GetSkill(skillid, true);

	if(_level != null)
		return _level;

	return 0;
}

function NTC_GetCastDelay(skillid)
{
	var _delay = GetBaseStat("skills.txt", skillid, 165);

	if(_delay)
		return (_delay*NTC_DELAY_FRAME);

	return 0;
}

function NTC_SwapWeapons(switchto)
{
	if(arguments.length > 0 && me.weaponstab == switchto)
		return true;

	NTC_PingDelay(200);

	if(!NTC_WaitIdleMode())
		return false;

	return me.SwapWeapons();
}

function NTC_DoClick(button, shift, x, y)
{
	if(arguments.length < 2)
		return false;

	if(button != NTC_CLICK_LDOWN)
		button = NTC_CLICK_RDOWN;

	switch(arguments.length)
	{
	case 2:
		ClickMap(button, shift, me.x, me.y);
		break;
	case 3:
		if(!ClickMap(button, shift, x))
			return false;
		break;
	default:
		ClickMap(button, shift, x, y);
		break;
	}

	NTC_Delay(200);

	ClickMap(button+2, NTC_SHIFT_NONE, null);

	return true;
}

function NTC_MyGold()
{
	return me.GetStat(14) + me.GetStat(15);
}

function NTC_MyGoldCarry()
{
	return me.GetStat(14);
}

function NTC_StashGoldFull()
{
	var _maxgold;
	var _level = me.GetStat(12);

	if(_level < 30)
		_maxgold = Math.floor((_level+10)/10) * 50000;
	else
		_maxgold = 800000 + Math.floor((_level-30)/2) * 50000;

	return (_maxgold == me.GetStat(15));
}

function NTC_CharGoldFull()
{
	return (me.GetStat(14) >= (me.GetStat(12)*10000));
}

function NTC_CheckOwner(object, ownername)
{
	var _owner;

	if(!object)
		return false;

	_owner = object.GetParent();
	if(!_owner)
		return false;

	if(arguments.length < 2)
	{
		if(_owner == me.name || _owner.name == me.name)
			return true;
	}
	else
	{
		if(_owner == ownername || _owner.name == ownername)
			return true;
	}

	return false;
}

function NTC_ItemToCursor(item)
{
	if(me.itemoncursor)
		return true;

	for(var i = 0 ; i < 80 ; i++)
	{
		if((i % 40) == 0)
			me.ClickItem(0, item);

		NTC_Delay(100);

		if(me.itemoncursor)
		{
			NTC_PingDelay(200);

			return true;
		}
	}

	return false;
}

function NTC_ClearCursor()
{
	if(!me.itemoncursor)
		return true;

	for(var i = 0 ; i < 40 ; i++)
	{
		if((i % 20) == 0)
			NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE);

		NTC_Delay(100);

		if(!me.itemoncursor)
			return true;
	}

	return false;
}

function NTC_GetMerc()
{
	var _merc;

	_merc = me.GetMerc();

	if(_merc)
	{
		if(_merc.hp > 0 && _merc.mode != 0 && _merc.mode != 12)
			return _merc;
	}

	return null;
}

function NTC_GetSpecialChest()
{
	var _chest;

	_chest = NTC_FindUnit(NTC_UNIT_OBJECT, GetLocaleString(3260));

	if(_chest)
	{
		do
		{
			switch(_chest.classid)
			{
			case 354:
			case 355:
			case 356:
			case 397:
			case 405:
			case 406:
			case 407:
				return _chest;
			}
		} while(_chest.GetNext());
	}

	return null;
}

function NTC_OpenChest(chest)
{
	if(!chest)
		return false;

	if(chest.mode > 0)
		return false;

	for(var i = 0 ; i < 20 ; i++)
	{
		if((i % 10) == 0)
		{
			if(GetDistance(me, chest) > 2)
				NTM_MoveTo(chest.areaid, chest.x+1, chest.y);

			NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, chest);
		}

		NTC_Delay(200);

		if(chest.mode > 0)
			return true;
	}

	return false;
}

function NTC_Delay(amount, random)
{
	if(arguments.length < 2)
		Delay(amount);
	else
		Delay(amount+Random(0, random));
}

function NTC_PingDelay(amount)
{
	var _currentping = me.ping;

	if(_currentping > 100)
		_currentping -= 100;
	else
		_currentping = 0;

	NTC_Delay(amount+_currentping);
}

function NTC_InTown(who)
{
	var _areaid;

	if(arguments.length < 1)
		who = me;

	while(who.areaid == 0)
		NTC_Delay(NTC_DELAY_FRAME);

	_areaid = who.areaid;

	return (_areaid == NTC_AREA_ID_ACT_1 || _areaid == NTC_AREA_ID_ACT_2 || _areaid == NTC_AREA_ID_ACT_3 || _areaid == NTC_AREA_ID_ACT_4 || _areaid == NTC_AREA_ID_ACT_5);
}

function NTC_InMyParty(playerName)
{
	var _player;
	var _myPartyId;

	_player = GetPlayerUnit();

	if(_player)
	{
		_myPartyId = _player.partyid;

		if(_myPartyId != 65535)
		{
			do
			{
				if(_player.name == playerName && _myPartyId == _player.partyid)
					return true;
			} while(_player.GetNext());
		}
	}

	return false;
}

function NTC_FindUnit(unittype, search, retry)
{
	var _unit;

	switch(arguments.length)
	{
	case 0:
		return null;
	case 1:
		search = null;
	case 2:
		retry = 0;
		break;
	}

	for(var i = 0 ; i <= retry ; i++)
	{
		_unit = GetUnit(unittype, search);

		if(_unit)
			return _unit;

		if(i < retry)
			NTC_Delay(200);
	}

	return null;
}

function NTC_GetBeltSize()
{
	var _items = me.GetItems();

	if(!_items)
		return 1;

	for(var i = 0 ; i < _items.length ; i++)
	{
		if(_items[i].mode == 1 && _items[i].itemloc == 8)
		{
			if(_items[i].classid == 344 || _items[i].classid == 345)
				return 2;
			else if(_items[i].classid == 346 || _items[i].classid == 347)
				return 3;

			return 4;
		}
	}

	return 1;
}

function NTC_FindScript(scriptname)
{
	var _script;
	var _scriptpath;

	_script = GetScript();

	if(_script)
	{
		do
		{
			_scriptpath = _script.name.toLowerCase();

			if(_scriptpath.indexOf(scriptname.toLowerCase()) != -1)
				return _script;
		} while(_script.GetNext());
	}

	return null;
}

function NTC_SendMsgToScript(scriptname, msg)
{
	var _script = NTC_FindScript(scriptname);

	if(_script)
		return _script.Send(msg);

	return false;
}

function NTC_StopScript(scriptname)
{
	var _script = NTC_FindScript(scriptname);

	if(_script)
		return _script.Stop();

	return false;
}

function NTC_WaitIdleMode()
{
	var _mode;

	for(var i = 0 ; i < 25 ; i++)
	{
		_mode = me.mode;

		if((_mode >= 1 && _mode <= 3) || _mode == 5 || _mode == 6)
			return true;

		NTC_Delay(NTC_DELAY_FRAME);
	}

	return false;
}

function NTC_SendLogToOOG(type, logString)
{
	return SendCopyData("D2NT Manager", null, 9<<16|type, logString);
}

function NTC_GetMinionCount(type)
{
	var _monsters, _count, _classIds, _quickReturn;
	var i;
	
	_quickReturn = false;
	_classIds = new Array();
	_count = 0;
	
	switch(type)
	{
		case MWS_RAISE_SKELETON:
			_classIds.push(MWC_MINION_SKELETON);
			break;
		case MWS_RAISE_SKELETAL_MAGE:
			_classIds.push(MWC_MINION_SKELETAL_MAGE);
			break;
		case MWS_SUMMON_GRIZZLY:
			_classIds.push(MWC_MINION_GRIZZLY);
			_quickReturn = true;
			break;
		case MWS_VALKYRIE:
			return false; // TODO: Check classid
		case MWS_RAVEN:
			_classIds.push(MWC_MINION_RAVEN);
			break;
		case MWS_CLAY_GOLEM:
			_classIds.push(MWC_MINION_CLAY_GOLEM);
			_classIds.push(MWC_MINION_IRON_GOLEM);
			_quickReturn = true;
			break;
		case MWS_BLOOD_GOLEM:
			_classIds.push(MWC_MINION_BLOOD_GOLEM);
			_classIds.push(MWC_MINION_IRON_GOLEM);
			_quickReturn = true;
			break;
		case MWS_FIRE_GOLEM:
			_classIds.push(MWC_MINION_FIRE_GOLEM);
			_classIds.push(MWC_MINION_IRON_GOLEM);
			_quickReturn = true;
			break;		
		case MWS_SHADOW_WARRIOR:
			_classIds.push(MWC_MINION_SHADOW_WARRIOR);
			_quickReturn = true;
			break;
		case MWS_SHADOW_MASTER:
			_classIds.push(MWC_MINION_SHADOW_MASTER);
			_quickReturn = true;
			break;
		case MWS_SUMMON_SPIRIT_WOLF:
			_classIds.push(MWC_MINION_SPIRIT_WOLF);
			break;
		case MWS_SUMMON_DIRE_WOLF:
			_classIds.push(MWC_MINION_DIRE_WOLF);
			break;
		case MWS_POISON_CREEPER:
			_classIds.push(MWC_MINION_POISON_CREEPER);
			_quickReturn = true;
			break;
		case MWS_CARRION_VINE:
			_classIds.push(MWC_MINION_CARRION_VINE);
			_quickReturn = true;
			break;
		case MWS_SOLAR_CREEPER:
			_classIds.push(MWC_MINION_SOLAR_CREEPER);
			_quickReturn = true;
			break;
	}

	if(_classIds.length == 0 && type != MWS_REVIVE)
		return _count;
		
	_monsters = NTC_FindUnit(NTC_UNIT_MONSTER);

	if(_monsters)
	{
		do 
		{
			if(_monsters.hp > 0 && _monsters.mode != 12)
			{
				if(_classIds.indexOf(_monsters.classid) == -1 && !(type == MWS_REVIVE && _monsters.GetState(96)))
					continue;
					
				if(NTC_CheckOwner(_monsters))
				{
					if(_quickReturn)
						return 1;
					else
						_count++;
				}
			}
		} while(_monsters.GetNext());
	}
	
	return _count;
}