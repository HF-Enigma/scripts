const NTA_DAMAGE_NONE = 0;
const NTA_DAMAGE_PHYSICAL = 1;
const NTA_DAMAGE_MAGIC = 2;
const NTA_DAMAGE_FIRE = 3;
const NTA_DAMAGE_LIGHTNING = 4;
const NTA_DAMAGE_COLD = 5;
const NTA_DAMAGE_POISON = 6;

var _NTA_SkillHand = new Array(11);
var _NTA_SkillDamage = new Array(11);
var _NTA_SkillRange = new Array(11);

var _NTA_CurseState = new Array(2);

var _NTA_NovaTick;

function NTA_Initialize()
{		
	if ((NTConfig_AttackSkill[1] == -1 || NTConfig_AttackSkill[3] == -1) &&
		me.classid != NTC_CHAR_CLASS_NECROMANCER &&
		me.classid != NTC_CHAR_CLASS_BARBARIAN) {
		//NTA_DetectAttackPattern(); // the old detection method
		
		Print("ÿc1 Warning------------------------------");
		switch (me.classid) {
		case NTC_CHAR_CLASS_AMAZON: Print("ÿc1 No attacks where set in your NTConfig_Amazon_" + me.charname + ".ntl file!"); break;
		case NTC_CHAR_CLASS_SORCERESS: Print("ÿc1 No attacks where set in your NTConfig_Sorceress_" + me.charname + ".ntl file!"); break;
		case NTC_CHAR_CLASS_NECROMANCER: Print("ÿc1 No attacks where set in your NTConfig_Necromancer_" + me.charname + ".ntl file!"); break;
		case NTC_CHAR_CLASS_PALADIN: Print("ÿc1 No attacks where set in your NTConfig_Paladin_" + me.charname + ".ntl file!"); break;
		case NTC_CHAR_CLASS_BARBARIAN: Print("ÿc1 No attacks where set in your NTConfig_Barbarian_" + me.charname + ".ntl file!"); break;
		case NTC_CHAR_CLASS_DRUID: Print("ÿc1 No attacks where set in your NTConfig_Druid_" + me.charname + ".ntl file!"); break;
		case NTC_CHAR_CLASS_ASSASSIN: Print("ÿc1 No attacks where set in your NTConfig_Assassin_" + me.charname + ".ntl file!"); break;
		default: Print("ÿc1 No attacks where set in your NTConfig_Class_" + me.charname + ".ntl file!"); break;
		}
	}
	
	for(var i = 0 ; i < NTConfig_AttackSkill.length ; i++)
	{
		if(NTConfig_AttackSkill[i] > -1)
		{
			_NTA_SkillHand[i] = GetBaseStat("skills.txt", NTConfig_AttackSkill[i], 166) ? 2 : NTC_HAND_RIGHT;
			_NTA_SkillDamage[i] = NTA_GetDamageType(NTConfig_AttackSkill[i]);

			switch(NTConfig_AttackSkill[i]) {
			case 0: //Normal Attack
				_NTA_SkillRange[i] = 2;
				break;
			case 44: //Frost Nova
				_NTA_SkillRange[i] = 7;
				break;
			case 48: // Nova
				_NTA_SkillRange[i] = 10;
				break;
			case 64: // Frozen Orb
				_NTA_SkillRange[i] = 15;
				break;
			case MWS_CORPSE_EXPLOSION: // Corpse Explosion
				_NTA_SkillRange[i] = 25;
				break;
			case 95: //Revive
				_NTA_SkillRange[i] = 20;
				break;
			case 97: //Smite
				_NTA_SkillRange[i] = 2;
				break;
			case 106: //Zeal
				_NTA_SkillRange[i] = 2;
				break;
			case 112: //Blessed Hammer
				_NTA_SkillRange[i] = 3;
				break;
			case 151: //Whirlwind
				_NTA_SkillRange[i] = 8;
				break;
			case 152: //Berserk
				_NTA_SkillRange[i] = 2;
				break;
			default:
				_NTA_SkillRange[i] = 20;
				break;
			}
		}
	}
	
	if (me.classid == NTC_CHAR_CLASS_NECROMANCER) {
		for (var i = 0 ; i < NTConfig_Curse.length ; i+= 1) {
			if (NTConfig_Curse[i] > 0) {
				switch (NTConfig_Curse[i]) {
					case 0: //nothing
						_NTA_CurseState[i] = 0;
						break;
					case 66: //amplify damage
						_NTA_CurseState[i] = 9;
						break;
					case 71: //dim vision
						_NTA_CurseState[i] = 23;
						break;
					case 72: //weaken
						_NTA_CurseState[i] = 19;
						break;
					case 76: //iron maiden
						_NTA_CurseState[i] = 55;
						break;
					case 77: //terror
						_NTA_CurseState[i] = 56;
						break;
					case 81: //confuse
						_NTA_CurseState[i] = 59;
						break;
					case 82: //life tap
						_NTA_CurseState[i] = 58;
						break;
					case 86: //attract
						_NTA_CurseState[i] = 57;
						break;
					case 87: //decrepify
						_NTA_CurseState[i] = 60;
						break;
					case 91: //lower resist
						_NTA_CurseState[i] = 61;
						break;
					default:
						NTConfig_Curse[i] = 0;
						Print("Invalid curse id");
						break;
				}
			}
		}
		NTConfig_ExplodeCorpsesRange = Math.floor((NTC_GetSkillLevel(NTConfig_ExplodeCorpses) + 7) / 3) - 0.5;
	}
}

function NTA_KillMonster(classid)
{
	var _target;
	var _maxattackcount = (me.classid == NTC_CHAR_CLASS_NECROMANCER) ? 1E4 : 400;

	if(NTConfig_AttackSkill[1] < 0 &&  me.classid != NTC_CHAR_CLASS_NECROMANCER)
		return false;

	_target = NTC_FindUnit(NTC_UNIT_MONSTER, classid, 5);

	if(!_target)
		return false;

	if(_target.IsAttackable())
	{
		var _attackcount = 0;

		while(_attackcount < _maxattackcount && NTA_IsValidMonster(_target))
		{
			if(NTA_Attack(_target, (_attackcount%30) == 0) < 2)
				break;

			_attackcount++;
		}
	}
	else
		Print("Monster not attackable");

	return (_target.hp <= 0 || _target.mode == 0 || _target.mode == 12);
}

function NTA_ClearPosition(range, pickitem, safelevel)
{
	var _orgx, _orgy;
	var _spectype = [0x0A, 0x01, 0x01];
	var _skiplist;
	var _attackcount = 0;
	var _target;
	var _distance, _mingid, _mindistance;
	var _result;
	var _maxattackcount;

	if((NTConfig_AttackSkill[1] < 0 || NTConfig_AttackSkill[3] < 0) &&  me.classid != NTC_CHAR_CLASS_NECROMANCER)
		return false;

	switch(arguments.length)
	{
	case 0:
		range = 20;
	case 1:
		pickitem = false;
	case 2:
		safelevel = 0;
	default:
		if((NTConfig_CheckSelfSafe < 0x01) && (NTConfig_CheckMercSafe < 0x01))
			safelevel = 0;
		break;
	}

	_orgx = me.x;
	_orgy = me.y;

	for(var i = 0 ; i < _spectype.length ; i++)
	{
		_maxattackcount = (me.classid == NTC_CHAR_CLASS_NECROMANCER) ? 1E4 : ((i+1)*300);
		_skiplist = new Array();

		while(_attackcount < _maxattackcount)
		{
			_mindistance = 100000;

			_target = NTC_FindUnit(NTC_UNIT_MONSTER);

			if(_target)
			{
				do
				{
					if(_skiplist.indexOf(_target.gid) < 0)
					{
						if(_target.IsAttackable() && (_target.spectype & _spectype[i]))
						{
							if(GetDistance(_orgx, _orgy, _target.x, _target.y) <= range && NTA_IsValidMonster(_target))
							{
								_distance = GetDistance(me, _target);

								if(_distance < _mindistance)
								{
									_mingid = _target.gid;
									_mindistance = _distance;
								}
							}
						}
						else
							_skiplist.push(_target.gid);
					}
				} while(_target.GetNext());
			}

			if(_mindistance < 100000)
			{
				_target = NTC_FindUnit(NTC_UNIT_MONSTER, _mingid);

				if(_target)
				{
					_result = NTA_Attack(_target, (_attackcount%30) === 0);
				
					switch(_result)
					{
					case 1:
						_skiplist.push(_mingid);
						break;
					case 2:
					case 3:
						_attackcount++;
						break;
					default:
						return false;
					}
				}
			}
			else
				break;
		}
	}

	if(me.classid == NTC_CHAR_CLASS_PALADIN) {
		if(_attackcount > 2 && (parseInt(me.hp*100/me.hpmax) < NTConfig_UseRedemptionHP || parseInt(me.mp*100/me.mpmax) < NTConfig_UseRedemptionMP)) {
			if(NTC_PutSkill(124, NTC_HAND_RIGHT))
				NTC_PingDelay(1000);
		}
	} else if (me.classid == NTC_CHAR_CLASS_NECROMANCER) {
		NTA_NecRaiseArmy();
	} else if (me.classid == NTC_CHAR_CLASS_BARBARIAN) {
		if (NTConfig_UseFindItem && _attackcount > 2) {
			NTA_FindItem(NTConfig_FindItemRange);
		}
	}

	if(NTConfig_OpenChest)
	{
		_target = NTC_GetSpecialChest();

		if(_target && GetDistance(_orgx, _orgy, _target.x, _target.y) <= range && NTC_OpenChest(_target))
			_attackcount++;
	}

	if(pickitem && _attackcount > 0)
		NTSI_PickItems();

	switch(safelevel)
	{
	case 1:
		return NTTMGR_CheckSafe(0, NTConfig_CheckMercSafe&0x01);
	case 2:
		return NTTMGR_CheckSafe(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe);
	default:
		break;
	}

	return true;
}

function NTA_ClearLevel(pickitem, safelevel)
{
	var i;
	var _room, _rooms;
	var _distance, _minindex, _mindistance;

	_room = GetRoom();

	if(!_room)
		return false;

	switch(arguments.length)
	{
	case 0:
		pickitem = true;
	case 1:
		safelevel = 2;
	default:
		if(NTConfig_CheckSelfSafe < 0x01 && NTConfig_CheckMercSafe < 0x01)
			safelevel = 0;
		break;
	}

	_rooms = new Array();

	do
	{
		_rooms.push([parseInt(_room.x*5 + _room.xsize*5/2), parseInt(_room.y*5 + _room.ysize*5/2)]);
	} while(_room.GetNext());

	while(_rooms.length > 0)
	{
		_mindistance = 100000;

		for(i = 0 ; i < _rooms.length ; i++)
		{
			_distance = GetDistance(me.x, me.y, _rooms[i][0], _rooms[i][1]);

			if(_distance < _mindistance)
			{
				_minindex = i;
				_mindistance = _distance;
			}
		}

		if(NTM_MoveTo(me.areaid, _rooms[_minindex][0], _rooms[_minindex][1], 1))
		{
			if(!NTA_ClearRoom(pickitem, safelevel)){
				return false;
			}

			NTP_DoPrecast(false);
		}

		_rooms.splice(_minindex, 1);
	}

	return true;
}

function NTA_ClearRoom(pickitem, safelevel)
{
	var _room;
	var _spectype = [0x0A, 0x01, 0x01];
	var _skiplist;
	var _attackcount = 0;
	var _target;
	var _distance, _mingid, _mindistance;
	var _result;
	var _maxattackcount;

	if((NTConfig_AttackSkill[1] < 0 || NTConfig_AttackSkill[3] < 0) &&  me.classid != NTC_CHAR_CLASS_NECROMANCER)
		return false;

	_room = me.GetRoom();

	if(!_room)
		return false;

	switch(arguments.length)
	{
	case 0:
		pickitem = false;
	case 1:
		safelevel = 0;
	default:
		if(NTConfig_CheckSelfSafe < 0x01 && NTConfig_CheckMercSafe < 0x01)
			safelevel = 0;
		break;
	}

	for(var i = 0 ; i < _spectype.length ; i++)
	{		
		_maxattackcount = (me.classid == NTC_CHAR_CLASS_NECROMANCER) ? 1E4 : ((i+1)*200);
		_skiplist = new Array();

		while(_attackcount < _maxattackcount)
		{
			_mindistance = 100000;

			_target = NTC_FindUnit(NTC_UNIT_MONSTER);

			if(_target)
			{
				do
				{
					if(_skiplist.indexOf(_target.gid) < 0)
					{
						if(_target.IsAttackable() && (_target.spectype&_spectype[i]))
						{
							if(_room.UnitInRoom(_target) && NTA_IsValidMonster(_target))
							{
								_distance = GetDistance(me, _target);

								if(_distance < _mindistance)
								{
									_mingid = _target.gid;
									_mindistance = _distance;
								}
							}
						}
						else
							_skiplist.push(_target.gid);
					}
				} while(_target.GetNext());
			}

			if(_mindistance < 100000)
			{
				_target = NTC_FindUnit(NTC_UNIT_MONSTER, _mingid);

				if(_target)
				{
					_result = NTA_Attack(_target, (_attackcount%30) == 0);

					switch(_result)
					{
					case 1:
						_skiplist.push(_mingid);
						break;
					case 2:
					case 3:
						_attackcount++;
						break;
					default:
						return false;
					}
				}
			}
			else
				break;
		}
	}

	if(me.classid == NTC_CHAR_CLASS_PALADIN)
	{
		if(_attackcount > 2 && (parseInt(me.hp*100/me.hpmax) < NTConfig_UseRedemptionHP || parseInt(me.mp*100/me.mpmax) < NTConfig_UseRedemptionMP))
		{
			if(NTC_PutSkill(124, NTC_HAND_RIGHT))
				NTC_PingDelay(1000);
		}
	} else if (me.classid == NTC_CHAR_CLASS_NECROMANCER) {		
		NTA_NecRaiseArmy();
	} else if (me.classid == NTC_CHAR_CLASS_BARBARIAN) {
		if (NTConfig_UseFindItem && _attackcount > 2) {
			NTA_FindItem(NTConfig_FindItemRange);
		}
	}

	if(NTConfig_OpenChest)
	{
		_target = NTC_GetSpecialChest();

		if(_target && _room.UnitInRoom(_target) && NTC_OpenChest(_target))
			_attackcount++;
	}

	if(pickitem && _attackcount > 0)
		NTSI_PickItems();

	switch(safelevel)
	{
	case 1:
		return NTTMGR_CheckSafe(0, NTConfig_CheckMercSafe&0x01);
	case 2:
		return NTTMGR_CheckSafe(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe);
	default:
		break;
	}

	return true;
}

function NTA_IsValidMonster(monster)
{
	var _classid;
	
	if(!monster) {
		return false;
	}
	
	if(monster.hp <= 0 || monster.mode == 0 || monster.mode == 12)
		return false;
		
	_classid = monster.classid;
	
	if(_classid == 391 || _classid == 773){
		return true;
	}

	if(((_classid >= 110 && _classid <= 113) || _classid == 608) && monster.mode == 8) // ignore flying scavengers
		return false;

	if(_classid == 68 && monster.mode == 14) // ignore burrowing maggots
		return false;

	if(_classid >= 258 && _classid <= 263 && monster.mode == 14) // ignore submerged WaterWatchers
		return false;

	if(monster.GetState(53) || monster.GetState(96)) // Conversion, Revive
		return false;

	// if(!CheckCollision(me, monster, 0)) // Invalid map location
		// return false;

	return true;
}

function NTA_GetDamageType(skillid)
{
	if(skillid == 74  || skillid == 147 || skillid == 97) // Corpse Explosion && Frenzy && Smite
		return NTA_DAMAGE_PHYSICAL;
	if (skillid == 111) // Vengeance
		return NTA_DAMAGE_NONE;
	if (me.classid == NTC_CHAR_CLASS_PALADIN && (NTConfig_AttackSkill[1] == 112 && NTConfig_AttackSkill[5] > -1)) {
		if (skillid == 101) //holy bolt
			return NTA_DAMAGE_NONE;
	} else {
		if (skillid == 112) // Blessed Hammer
			return NTA_DAMAGE_MAGIC;
	}
	switch(GetBaseStat("skills.txt", skillid, 233))
	{
	case "cold":
		return NTA_DAMAGE_COLD;
	case "fire":
		return NTA_DAMAGE_FIRE;
	case "ltng":
		return NTA_DAMAGE_LIGHTNING;
	case "mag":
		return NTA_DAMAGE_MAGIC;
	case "pois":
		return NTA_DAMAGE_POISON;
	case "stun":
		return NTA_DAMAGE_NONE;
	default:
		if(GetBaseStat("skills.txt", skillid, 178) || GetBaseStat("skills.txt", skillid, 182)) // aura or passive
			return NTA_DAMAGE_NONE;
	}

	return NTA_DAMAGE_PHYSICAL;
}

function NTA_GetResistance(enemy, type)
{
	switch(type)
	{
	case NTA_DAMAGE_PHYSICAL:
		return enemy.GetStat(36);
	case NTA_DAMAGE_MAGIC:
		return enemy.GetStat(37);
	case NTA_DAMAGE_FIRE:
		return enemy.GetStat(39);
	case NTA_DAMAGE_LIGHTNING:
		return enemy.GetStat(41);
	case NTA_DAMAGE_COLD:
		return enemy.GetStat(43);
	case NTA_DAMAGE_POISON:
		return enemy.GetStat(45);
	}

	return 0;
}


function NTA_GetAttackType(target, startIndex, resistMaxPrimary, resistMaxSecondary, resistMaxTertiary) {

	var _currIndex;
	var _holdMinResist = [999, startIndex];
	var _resistArray = [999, 999, 999];
	var _holdResistMax = [resistMaxPrimary, resistMaxSecondary, resistMaxTertiary];
	var i;

	for (i = 0, _currIndex = startIndex; i < 3; i++, _currIndex += 2) {
		if (NTConfig_AttackSkill[_currIndex] > -1) {
			_resistArray[i] = NTA_GetResistance(target, _NTA_SkillDamage[_currIndex]);
			if(_resistArray[i] < 100) {
				switch(_NTA_SkillDamage[_currIndex])
				{
				case NTA_DAMAGE_PHYSICAL:	
					_resistArray[i] = target.GetStat(36);
					break;
				case NTA_DAMAGE_MAGIC:
					_resistArray[i] = target.GetStat(37) - me.GetStat(358);
					break;
				case NTA_DAMAGE_FIRE:
					_resistArray[i] = target.GetStat(39) - me.GetStat(333);
					break;
				case NTA_DAMAGE_LIGHTNING:
					_resistArray[i] = target.GetStat(41) - me.GetStat(334);
					break;
				case NTA_DAMAGE_COLD:
					_resistArray[i] = target.GetStat(43) - me.GetStat(335);
					break;
				case NTA_DAMAGE_POISON:
					_resistArray[i] = target.GetStat(45) - me.GetStat(336);
					break;
				}	
				
				if(_resistArray[i] < -100)
					_resistArray[i] = -100;
			}					
			if (_resistArray[i] < _holdResistMax[i]) // Return index if attack is < our max resist requirement
			return _currIndex;
		}

		if (_resistArray[i] < _holdMinResist[0]) { // Store lowest resist attack
			_holdMinResist[0] = _resistArray[i];
			_holdMinResist[1] = _currIndex;
		}

		if (_currIndex == 1 || _currIndex == 2) // Skip non boss primary if boss attack
		_currIndex += 2;
	}


	if (_holdMinResist[0] >= 100) // Every attack is immune
		return startIndex;
	else // At this point all available skills are greater than given max resist settings. Use lowest resist skill.
		return _holdMinResist[1];
}

function NTA_IsWeaponBroken() {
	var _weapon;
	_weapon = me.GetItems();

	if (_weapon) {
		for (var i = 0; i < _weapon.length; i++) {
			if (_weapon[i].itemflag & 0x100) {
				if (_weapon[i].mode == 1 && _weapon[i].itemloc == 4 || _weapon[i].itemloc == 5) {
					Print(COLOR_8 + "My weapon broke, I am going to town to repair it.");
					NTTMGR_VisitTown();
					break;

				}
			}
		}
	}
}

function NTA_CheckForCloseMonsters(range, target) {
	if (range < 1 || arguments.length < 1) return false;

	var _monstersClose = false;
	var _checkMonster = NTC_FindUnit(NTC_UNIT_MONSTER);

	if (_checkMonster) {
		do {
			if(arguments.length > 1 && target == _checkMonster){
				continue;
			}
			if (_checkMonster.IsAttackable() && GetDistance(me.x, me.y, _checkMonster.x, _checkMonster.y) < range && NTA_IsValidMonster(_checkMonster)) {
				_monstersClose = true;
				break;
			}
		} while (_checkMonster.GetNext());
	}
	return _monstersClose;
}

function NTA_PreAttack() {
	if(NTT_CheckBelt(1))	//
	{
		NTTMGR_VisitTown();	//
	}
}


function NTA_GetEvasionVector(length, offset, origin, rotationAngle)
{
	var _vec, point_x, point_y, _maxDistIndex, _dist, _maxDist, _path, _pathX, _pathY, result;
	
	point_x = new Array();
	point_y = new Array();
	
	if(arguments.length < 3 || !origin.x || !origin.y || !origin.areaid)
		origin = me;
	
	if(arguments.length < 4 || isNaN(rotationAngle))
		rotationAngle = 15;

	rotationAngle = rotationAngle/180*Math.PI;
	
	for(var angle = 0; angle < 2*Math.PI; angle = angle+rotationAngle)
	{
		point_x.push(origin.x + Math.round(Math.sin(angle) * length));
		point_y.push(origin.y + Math.round(Math.cos(angle) * length));
	}

	_maxDistIndex = -1;
	_maxDist = 0;
	_dist = 0;

	// Find the spot with the largest distance to the next monster
	for(var i = 0; i < point_x.length; i++)
	{
		_path = GetPath(origin.areaid, origin.x, origin.y, point_x[i], point_y[i], true);
		
		if(_path)
		{
			_pathX = _path[_path.length - 1][0];
			_pathY = _path[_path.length - 1][1];
			
			if(GetDistance(point_x[i], point_y[i], _pathX, _pathY) > offset || !CheckCollision(origin.areaid, _pathX, _pathY, 0))
				continue;
				
			_dist = GetDistance(origin.x, origin.y, _pathX, _pathY);
			
			if(_dist > _maxDist)
			{
				_maxDist = _dist;
				_maxDistIndex = i;			
			}
		}
	}
	
	result = new Array(2);
	
	if(_maxDistIndex != -1){
		result[0] = point_x[_maxDistIndex];
		result[1] = point_y[_maxDistIndex];
	}
	else{
		result[0] = -1;
		result[1] = -1;
	}
	
	return result;
}

function NTA_MoveAwayFromMonster(target, _VEC_LENGTH, _DELTA_DEST)
{
	if(!target) {return false;}
	
	if(arguments.length < 2) {
		_VEC_LENGTH = 8;
		_DELTA_DEST = 3;
	}
	
	var _targetVec, _destx, _desty, _path;
	
	_targetVec = NTA_GetEvasionVector(_VEC_LENGTH, _DELTA_DEST);
		
	if(_targetVec && _targetVec[0] != -1)
	{
		_destx = Math.round(_targetVec[0]);
		_desty = Math.round(_targetVec[1]);
		
		return NTM_MoveTo(me.areaid, _destx, _desty, 0);
	}
	
	return false;
}