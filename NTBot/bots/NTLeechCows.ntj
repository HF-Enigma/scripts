var NTCOW_PickRunesInstantly = true;
var NTCOW_helper_joined_game = false;
var NTCOW_MercUnit = null;

function NTMain(){
	Include("libs/common/NTCommon.ntl");
	NTC_IncludeLibs();
	NTC_IncludeConfig("NTBot/char_configs");
	
	NT_LoadConfig();
	
	if(me.classid == NTC_CHAR_CLASS_NECROMANCER){
		NTConfig_SkeletonArmy = 0;
		NTConfig_MageArmy = 0;
		NTConfig_ReviveArmy = 0;
	}
	
	NTCOW_helper_joined_game = NTC_InMyGame(TB_helper[0]);
	
	NTSI_LoadNIPFiles("NTBot/item_configs");

	NTA_Initialize();
	
	if(me.charname == TB_leader && me.areaid == 39){
		NTCOW_ClearCowLevel();
		NTC_SendMsgToScript("NTBotGame.ntj", "SCRIPT_END");
		return;
	}
	
	if(me.charname == TB_leader) {
		NT_File("logs/msg/"+me.charname+"-helpernextgame.txt", 1, me.gamename + "/" + me.gamepassword);
		// me.revealautomap = true;
		// me.showenemyonautomap = true;
		// me.showmissileonautomap = true;
	}

	if(!NTTM_CheckAct(1)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_CheckAct()");
		return;
	}
	
	if(me.charname != TB_leecher[0]){
		NTTMGR_TownManager();
	}
	
	NTCOW_helper_joined_game = NTC_InMyGame(TB_helper[0]);
	
	switch(NTConfig_LeechCowType)
	{
		case 1:
			if(!NT_LeechFighter()){
				NTC_SendMsgToScript("NTBotGame.ntj", "NT_LeechFighter()");
			}
			break;
		case 2:
			if(!NT_LeechHelper()){
				NTC_SendMsgToScript("NTBotGame.ntj", "NT_LeechHelper()");
			}
			break;
		default:
			if(!NT_LeechPassively()){
				NTC_SendMsgToScript("NTBotGame.ntj", "NT_LeechPassively()");
			}
			break;
	}

	NTC_SendMsgToScript("NTBotGame.ntj", "SCRIPT_END");
}

function NT_LeechFighter(){
	NTTM_TownMove("portalspot");
	
	var _starttick, _prev_areaid;
	
	_prev_areaid = me.areaid;
	
	NTP_DoPrecast(true);	
	while(_prev_areaid ==  me.areaid){	
		Delay(200);
		
		if(!NTCOW_helper_joined_game){
			NTCOW_helper_joined_game = NTC_InMyGame(TB_helper[0]);
			continue;
		}
		
		if(!NTC_InMyGame(TB_helper[0])){ return false; }
		NTM_UsePortal("BluePortal", 131, TB_helper[0]);
	}
	
	var leecherBo = TB_GetPlayerUnit(TB_leecher[0]);
	
	while(!leecherBo || leecherBo.areaid != me.areaid){
		Delay(500);
		leecherBo = TB_GetPlayerUnit(TB_leecher[0]);
	}
	
	NTP_DoPrecast(true);
	Delay(500);
	NTM_MoveTo(me.areaid, me.x+1, me.y+1);
	Delay(500);
	NTM_MoveTo(me.areaid, me.x-1, me.y-1);
	Delay(500);
	NTM_MoveTo(me.areaid, me.x+1, me.y+1);
	Delay(500);
	NTM_MoveTo(me.areaid, me.x-1, me.y-1);
	Delay(500);
	NTM_MoveTo(me.areaid, me.x+1, me.y+1);
	Delay(500);
	NTM_MoveTo(me.areaid, me.x-1, me.y-1);
	Delay(9000);
	
	NTM_UsePortal("BluePortal", NTC_AREA_ID_ACT_1, TB_helper[0]);
	
	NTTM_TownMove("akara");
	
	while(NTC_InMyParty(TB_helper[0])){
		if(NTCOW_CheckCowPortal()){ break; }
		Delay(200);
	}
	
	if(!NTCOW_CheckCowPortal()){ return false; }
	
	Delay(2000); // wait for Helper leave game
	
	if(!NTCOW_TakeCowPortal()){
		NTC_SendMsgToScript("NTBotGame.ntj", "Failed to take Cow Portal.");
		return false;
	}
	
	Delay(1000);
	NTCOW_ClearCowLevel();
	
	return true;
}

function NT_LeechHelper(){
	if(!NTCOW_CheckCowPortal()){		
		var leg;
		NTU_ClearCube();
		NTT_ClearInventory();
		
		if(!NTCOW_GetLeg()){
			NTC_SendMsgToScript("NTBotGame.ntj", "NTCOW_GetLeg()");
			return false;
		}
		
		leg = NTCOW_GetLegUnit();
		if(!leg){
			NTC_SendMsgToScript("NTBotGame.ntj", "NTCOW_GetLegUnit()");
			return false;
		}
		
		NTM_MakeTP();
		
		var leecherBo = TB_GetPlayerUnit(TB_leecher[0]);
		
		while(!leecherBo || leecherBo.areaid != me.areaid){
			Delay(500);
			leecherBo = TB_GetPlayerUnit(TB_leecher[0]);
		}
		
		Delay(2000);
		NTP_DoPrecast(true);
		
		// NTTM_CheckAct(1);
		NTM_UsePortal("BluePortal", NTC_AREA_ID_ACT_1, TB_helper[0]);
		
		var tome = NTCOW_GetTome();
		if(!tome){
			NTC_SendMsgToScript("NTBotGame.ntj", "NTCOW_GetTome()");
		}
		
		NTCOW_OpenCowPortal(leg, tome);
		if(!NTCOW_CheckCowPortal()){	
			NTC_SendMsgToScript("NTBotGame.ntj", "NTCOW_OpenCowPortal()");
		}
	}
	
	Print(COLOR_4 + "Cow portal is up, it's time to Moo Moo!");
	Delay(500);
	
	return true;
}

function NT_LeechPassively(){	
	NTTM_TownMove("portalspot");
	
	var _starttick, _prev_areaid;
	
	_prev_areaid = me.areaid;
	
	NTP_DoPrecast(true);	
	while(_prev_areaid ==  me.areaid){	
		Delay(200);
		
		if(!NTCOW_helper_joined_game){
			NTCOW_helper_joined_game = NTC_InMyGame(TB_helper[0]);
			continue;
		}
		
		if(!NTC_InMyGame(TB_helper[0])){ return false; }
		NTM_UsePortal("BluePortal", 131, TB_helper[0]);
	}
	
	NTP_DoPrecast(true);
	Delay(2000);
	NTP_DoPrecast(true);
	Delay(2000);
	NTP_DoPrecast(true);
	Delay(1000);
	NTP_DoPrecast(true);
	
	// Delay(10000);
	
	// NTTM_CheckAct(1);
	
	// NTTM_TownMove("akara");
	
	// NTCOW_TakeCowPortal();
	
	// while(1){	
		// Delay(1000);
	// }
	
	return true;
}

// Internal functions
function NTCOW_CheckCowPortal(){
	var _portal = NTC_FindUnit(NTC_UNIT_OBJECT, 60, 5);
	if(_portal){
		if(_portal.subareaid == 39){
			return true;
		}
	}
	else
		return false;
}

function NTCOW_GetTP(){
	var _portals = me.GetItems("tbk");

	if (_portals)
	{
		for (var i = 0; i < _portals.length; i++)
		{
			if (_portals[i].mode == 0 && (_portals[i].itemloc != 0 || NTConfig_Columns[_portals[i].y][_portals[i].x] > 0))
			{
				return _portals[i];
			}
		}
	}
	return false;
}

function NTCOW_TakeCowPortal(){
	var _portal;

	_portal = NTC_FindUnit(NTC_UNIT_OBJECT, 60, 5);
	
	if(!_portal){
		return false;
	}
	
	NTM_MoveTo(me.areaid, _portal.x+1, _portal.y);
	
	return NTM_UsePortal("Portal", 39, "dummy", _portal);
}

function NTCOW_SecondTomeTP(npc, type, amount){
	var _items;
	var _counter = 0;

	if(arguments.length < 1)
		return false;

	if(arguments.length < 2)
		type = 0;

	if(arguments.length < 0)
		amount = 1;

	if(amount == 0)
		return false;

	if(type)
		_items = npc.GetItems("tbk");

	if(_items)
	{
		if(_items.length > 0)
		{
			for(var i = 0 ; i < amount ; i++)
			{
				if(NTT_ShopItem(_items[0], npc, 2))
					_counter++;
			}
		}
	}
	return (_counter > 0);
}

function NTCOW_GetLegUnit(){
	var _items, _leg;
	_items = me.GetItems(88);
	if(_items){
		_leg = _items[0];
	}
	
	return _leg;
}

function NTCOW_GetLeg(){	
	var _leg;
	
	if(!NTTM_TownMove("waypoint")){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove(waypoint)");
		return false;
	}
	if(!NTM_TakeWaypoint(4)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_TakeWaypoint(4)");
		return false;
	}
	
	NTP_DoPrecast();
	
	if(!NTM_MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 22, 10, 10)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_MoveToPresetUnit()");
		return false;
	}
	
	NTC_PingDelay(2000);
	
	if(!NTM_UsePortal("Portal", 38)){
		NTC_SendMsgToScript("NTBotGame.ntj", "NTM_UsePortal()");
		return false;
	}
	
	var _wirtbody = NTC_FindUnit(NTC_UNIT_OBJECT, 268);
	
	if(!_wirtbody){
		NTC_SendMsgToScript("NTBotGame.ntj", "Wirt's body not found.");
		return false;
	}
	
	if(!NTM_MoveTo(_wirtbody.areaid, _wirtbody.x+3, _wirtbody.y)){
		NTC_SendMsgToScript("NTBotGame.ntj", "Failed to move to Wirt's body.");
		return false;
	}
	
	if(!NTC_OpenChest(_wirtbody)){
		NTC_SendMsgToScript("NTBotGame.ntj", "Failed to open Wirt's body for leg.");
		return false;
	}
	
	NTC_PingDelay(1000);
	for (i = 0; i < 10; i++){
		NTC_Delay(NTC_DELAY_FRAME);
		_leg = NTC_FindUnit(NTC_UNIT_ITEM, 88);
		if (_leg)
			break;
	}
	
	if(!NTT_CheckSpace(_leg.xsize, _leg.ysize)){
		NTTMGR_VisitTown();
	}
	
	for (i = 0; i < 20; i++){
		if ((i % 5) == 0){
			if (_leg.mode == 3 || _leg.mode == 5){
				if (NTC_ClearCursor())
				NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _leg);
			}
		}
		NTC_PingDelay(100);
		if (_leg.mode != 3 && _leg.mode != 5){
			return true;
		}
	}
	
	return false;
}

function NTCOW_GetTome(){
	var _npc, _portal;
	NTTM_TownMove("akara");
	
	for(var i = 0; i < 10; i++)
	{
		_npc = NTC_FindUnit(NTC_UNIT_NPC, NTC_NPC_ID_AKARA);
		
		if(_npc)
			break;
	}

	if(_npc)
	{
		if(NTT_DoInteract(_npc))
		{
			if(NTT_DoTrade(_npc))
			{
				NTT_FillTome(_npc, 1);
				NTT_FillTome(_npc, 0);
				NTCOW_SecondTomeTP(_npc, "tbk", 1);
				
				_portal = NTCOW_GetTP();
				
				if(!_portal)
				{
					NTC_SendMsgToScript("NTBotGame.ntj", "NTR_GetTP()");
					return _portal;
				}
			}		
		}
		
		me.Cancel(1);
	}
	
	return _portal;
}

function NTCOW_OpenCowPortal(leg, tome){
	var _items = me.GetItems(NTC_UNIT_CUBE);
	
	if(!_items || _items.length < 1)
		return false;
		
	var _cube = _items[0];
	
	if(!_cube){
		NTC_SendMsgToScript("NTBotGame.ntj", "No cube found.");
		return false;
	}
	
	// open inventory
	SetUIState(0x01, true);
	
	// clear cube
	if(NTCU_CheckCubeInventoryInt() > 0)
	{
		if(!NTCU_OpenCubeInt(_items[0]))
			return false;

		if(NTU_ClearCube() < 1){
			NTC_SendMsgToScript("NTBotGame.ntj", "NTU_ClearCube()");
			return false;
		}

		NTCU_CloseCubeInt();
	}
	
	NTCU_OpenCubeInt(_cube);
	
	NTCU_MoveItemToCubeInt(_cube, leg);
	NTCU_MoveItemToCubeInt(_cube, tome);
		
	if(!NTCOW_Transmute(_cube)){
		NTC_SendMsgToScript("NTBotGame.ntj", "Transmute()");
		return false;
	}
	
	NTCU_CloseCubeInt();
	
	me.Cancel(1);	
	
	Delay(250);
	
	return true;
}

function NTCOW_Transmute(cube)
{		
	var msgFile;
	var msg;
	var path = "logs/transmute/" + me.charname + ".txt";
	
	msgFile = NT_File(path, 1, "ready");
	if(msgFile){		
		msgFile.Close();
	}	
	
	Delay(1500);
	
	var cubeitems = NTCU_GetItemsInCube();
	if(cubeitems.length > 0){
		NTU_ClearCube();
		return false;
	}
	return true;
}

function NTCOW_BuildCowRooms() {
	var room, finalRooms = [];
	var levelMaxX = -1E6, levelMaxY = -1E6, levelMinX = 1E6, levelMinY = 1E6;
	
	room = GetRoom();
	
	do {
		levelMinX = room.x <= levelMinX ? room.x: levelMinX;
		levelMinY = room.y <= levelMinY ? room.y: levelMinY;
		levelMaxX = room.x+room.xsize >= levelMaxX ? room.x+room.xsize: levelMaxX;
		levelMaxY = room.y+room.ysize >= levelMaxY ? room.y+room.ysize: levelMaxY;
	} while (room.GetNext());
	
	Print(levelMinX + " " + levelMinY + " " + levelMaxX + " " + levelMaxY);

	room = GetRoom();
	
	do {
		if(!(room.x == levelMinX || room.x == levelMaxX-8 || room.y == levelMinY || room.y == levelMaxY-8)){
			finalRooms.push([room.x * 5 + room.xsize*5 / 2, room.y * 5 + room.ysize*5 / 2]);
		}				
	} while (room.GetNext());
	

	return finalRooms;
}

function NTCOW_ClearCowLevel() {

	var i, room, result, myRoom,
		rooms = NTCOW_BuildCowRooms();
		
	NTConfig_ExplodeCorpsesRange = 8;
		
	Print("Built cow rooms, " + rooms.length +  " rooms in total.");
	Delay(1000);
	
	NTCOW_MercUnit = NTCOW_GetMerc();

	function RoomSort(a, b) {
		return GetDistance(myRoom[0], myRoom[1], a[0], a[1]) - GetDistance(myRoom[0], myRoom[1], b[0], b[1]);
	}

	myRoom = [me.x, me.y];
	
	while (rooms.length > 4) {	
		rooms.sort(RoomSort);
		
		if((rooms.length % 10) == 0 || rooms.length < 10)
			Print("Rooms sorted, " + rooms.length + " left.");
		
		RunGC();
		Delay(40);
		
		room = rooms.shift();
		
		if(!room || room.length != 2 ){
			continue;
		}
		
		if(!NTCOW_MoveTo(me.areaid, room[0], room[1], 3, true)){
			// return false;
			continue;
		}		
		
		NTP_DoPrecast();
		NTCOW_ClearPosition(30, true);
		
		// remove adjacent rooms
		for(i=0; i<rooms.length;){
			if(GetDistance(room[0], room[1], rooms[i][0], rooms[i][1]) <= 42){
				rooms.splice(i, 1);
				continue;
			}
			i++;
		}
		
		myRoom = room;
	}

	return true;
}

function NTCOW_ClearPosition(range, pickitem, safelevel){
	var _orgx, _orgy;
	var _skiplist;
	var _attackcount = 0;
	var _target;
	var _distance, _mingid, _mindistance;
	var _result;
	var _firstAttack = true;
	var _merc, mercNotFound = false;
	var i;
	
	switch(arguments.length)
	{
	case 0:
		range = 20;
	case 1:
		pickitem = false;
	default:
		if(NTConfig_CheckSelfSafe < 0x01 && NTConfig_CheckMercSafe < 0x01)
			safelevel = 0;
		break;
	}

	_orgx = me.x;
	_orgy = me.y;

	//Print("NTCOW_ClearPosition()");
	
	Delay(100);
	
	for(i = 0; i < 1; i++)
	{
		_attackcount = 0;
		while(_attackcount < (i+1)*8000)
		{
			_mindistance = 1E6;
			
			_target = NTC_FindUnit(NTC_UNIT_MONSTER);

			if(_target)
			{				
				do
				{
					if(_target.IsAttackable())
					{
						if(GetDistance(_orgx, _orgy, _target.x, _target.y) <= range  && NTCOW_IsValidMonster(_target))
						{
							if(NTCOW_MercUnit){
								_distance = GetDistance(NTCOW_MercUnit, _target);
							}
							else{
								if(!mercNotFound){
									NTCOW_TeleportTo(me.x, me.y);
									mercNotFound = true;
									Print("Cannot find the merc.");																
									NTCOW_MercUnit = NTCOW_GetMerc();
								}
								_distance = GetDistance(me, _target);
							}
							
							if(_distance < _mindistance)
							{
								_mingid = _target.gid;
								_mindistance = _distance;
								if(_mindistance <= 3){
									break;
								}
							}
						}
					}					
				} while(_target.GetNext());
			}

			if(_mindistance < 1E6)
			{								
				Delay(40);
				_target = NTC_FindUnit(NTC_UNIT_MONSTER, _mingid, 1);

				if(_target)
				{
					_result = NTA_Attack(_target, _firstAttack);					
					
					if(_firstAttack){
						_firstAttack = false;
					}					

					switch(_result)
					{
						case 1:
							break;
						case 2:
							if(NTCOW_MercUnit){
								NTC_CastSkill(NTConfig_ExplodeCorpses, NTC_HAND_RIGHT, NTCOW_MercUnit.x, NTCOW_MercUnit.y);
							}
							else{
								NTC_CastSkill(NTConfig_ExplodeCorpses, NTC_HAND_RIGHT, me.x, me.y);
							}
							Delay(40);
						case 3:
							if(NTCOW_PickRunesInstantly && (_attackcount % 4) == 0)
								NTSI_PickRunes();
							_attackcount++;
							break;
						default:
							_attackcount = 1E6;
					}
				}
			}
			else
				break;
		}
	}

	// if(_attackcount > 2 && me.classid == NTC_CHAR_CLASS_NECROMANCER)
	// {
		// NTA_NecRaiseArmy();
	// }
	
	if(pickitem){
		NTSI_PickItems_v2();
		//Print("NTSI_PickItems_v2() finished.");
	}
		
	switch(safelevel)
	{
		case 1:
			return NTTMGR_CheckSafe(0x00, 0x01);
		case 2:
			return NTTMGR_CheckSafe(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe);
	}

	return true;
}

function NTCOW_IsValidMonster(monster)
{
	if(!monster || monster.hp == undefined || monster.mode == undefined) {
		return false;
	}
	
	if(monster.hp <= 0 || monster.mode == 0 || monster.mode == 12)
		return false;
		
	return true;	
}

function NTCOW_MoveTo(areaId, x, y, retry, isClearPath){
	if (x == me.x && y == me.y)
		return true;

	if (arguments.length < 4)
		retry = 3;
	if (arguments.length < 5)
		isClearPath = false;

	var j;
	var _path;
	var _preX, _preY;

	_path = GetPath(areaId, me.x, me.y, x, y, true);
	if (!_path || _path.length == undefined)
		return false;

	for (var i = 0; i < _path.length; i++)
	{
		for (j = 0; j < retry; j++)
		{
			if (NTCOW_MoveToXY(me.areaid, _path[i][0], _path[i][1]))
				break;
		}

		if (j >= retry)
			return false;			
			
		_preX = me.x;
		_preY = me.y;
		
		NTSI_PickRunes();
		
		if (me.x != _preX || me.y != _preY)
		{
			if (!NTCOW_MoveToXY(me.areaid, _preX, _preY))
				return false;				
		}
	}
	
	return true;
}

function NTCOW_MoveToXY(areaid, x, y, retry, clearpath)
{
	var i, n;
	var _teleport;
	var _path;
	var _retry = 0;

	if(x == me.x && y == me.y)
		return true;

	if(arguments.length < 4)
		retry = 3;

	if(arguments.length < 5)
		clearpath = false;

	if(NTC_InTown() || NTC_GetSkillLevel(54) < 1)
		_teleport = false;
	else
		_teleport = true;

	if (_teleport && GetDistance(me.x, me.y, x, y) < 20) {// houstin add
        return NTCOW_TeleportTo(x, y);
	}
		
	_path = GetPath(areaid, me.x, me.y, x, y, _teleport);

	if(!_path)
		return false;

	for(i = 0 ; i < _path.length ; i++)
	{
		if((i == (_path.length-1)) && (i>=1) && GetDistance(_path[i-1][0], _path[i-1][1], _path[i][0], _path[i][1]) <= 6)
			return true;
			
		for(n = 0 ; n < 2 ; n++)
		{
			if(_teleport)
			{
				if(NTCOW_TeleportTo(_path[i][0], _path[i][1]))
					break;
			}
			else
			{
				if(NTM_WalkTo(_path[i][0], _path[i][1]))
					break;
			}
		}

		if(n < 2)
		{
			if(clearpath)
			{
				if(!NTA_ClearPosition(20, true, 2))
					return false;

				NTP_DoPrecast(false);

				NTM_MoveTo(me.areaid, _path[i][0], _path[i][1], 1);
			}
		}
		else if(_retry < retry)
		{
			_path = GetPath(areaid, me.x, me.y, x, y, _teleport);

			if(!_path)
				return false;

			i = -1;
			_retry++;
		}
		else
			return false;
	}

	return true;
}

function NTCOW_TeleportTo(x, y)
{
	NTC_CastSkill(54, NTC_HAND_RIGHT, x, y);
	
	for(var i = 0; i < 15; i++)
	{
		if(Math.abs(me.x - x) <= 6 && Math.abs(me.y - y) <= 6)
			return true;

		NTC_Delay(NTC_DELAY_FRAME);
	}

	return false;
}

function NTCOW_GetMerc()
{
	var _merc = me.GetMerc();
	
	if(_merc){
		return _merc;
	}	
	
	var _monster = NTC_FindUnit(NTC_UNIT_MONSTER);	

	if(_monster)
	{				
		do
		{
			if(_monster.classid == 338)
			{
				if(NTC_CheckOwner(_monster))
				{					
					return _monster;
				}
			}
		} while(_monster.GetNext());
	}

	return null;
}